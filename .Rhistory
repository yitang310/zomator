# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
resdata<-data.frame(t(as.matrix(resdata)))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
resdata<-data.frame(t(as.matrix(resdata[1,])))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(as.matrix(resdata))
resdata<-data.frame(t(as.matrix(resdata)))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
#return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(t(as.matrix(resdata)))
resdata<-data.frame(t(as.matrix(resdata)))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
#return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(data.frame(t(as.matrix(resdata))))
resdata<-data.frame(t(as.matrix(resdata)))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
#return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(t(as.matrix(resdata)))
resdata<-t(as.matrix(resdata))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
#return(resdata)
}
get_restaurant(key3,256)
m<-get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(t(as.matrix(resdata)))
resdata<-t(as.matrix(resdata))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
m<-get_restaurant(key3,256)
as.data.frame(m)
data.frame(m)
m
data.frame(m)
m
data.frame(t(m))
m[,1]
data.frame(t(m))
m[,1]
#data.frame(t(m))
m[1,]
#data.frame(t(m))
m
#data.frame(t(m))
str(m)
#data.frame(t(m))
m<-as.matrix(m)
str(m)
#data.frame(t(m))
library(dplyr)
bind_rows(m)
bind_row(get_restaurant(key3,256))
dplyr::bind_row(get_restaurant(key3,256))
bind_rows(get_restaurant(key3,256))
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
dplyr::bind_rows(resdata)
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
dplyr::bind_cols(resdata)
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
data.table::rbindlist(resdata)
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(str(resdata))
#data.table::rbindlist(resdata)
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(typeof(resdata))
#data.table::rbindlist(resdata)
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(typeof(resdata))
resdata<-do.call(rbind,lapply(my_list,data.frame))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
# Function of getting information about the restaurant
get_restaurant <- function(api_key=NULL, res_id=NULL) {
# Check the validation of api key
apikey_check(api_key)
# Check whether res_id is given
if (is.null(res_id)){
stop("Please enter the restaurant ID.")
}
URL <- 'https://developers.zomato.com'
params <- list(res_id = res_id)
# Sending request
resp <- httr::GET(
url = URL,
path = paste0("/api/v2.1/", "restaurant"),
config = httr::add_headers("user-key" = api_key),
query = params,
httr::user_agent("httr")
)
# Check whether the connection is successful
apikey_rescheck(resp)
# Convert json into dataframe
resdata <- jsonlite::fromJSON(httr::content(resp, as = 'text', encoding = 'UTF-8'), flatten = TRUE)
# Change the format of dataframe
resdata <- unlist(resdata, recursive = FALSE)
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
column <- "apikey|url|link|thumb|featured_image|zomato_events|R.res_id|custom|profile_image"
names(resdata) <- gsub("restaurant.|location.|user_rating.", "", names(resdata))
print(typeof(resdata))
resdata<-do.call(rbind,lapply(resdata,data.frame))
#print(str(resdata))
#resdata <- as.data.frame(resdata,stringsAsFactors=FALSE)[1,]
return(resdata)
}
get_restaurant(key3,256)
doc
document()
library(devtools)
document()
library(httr)
establishments_api<-function(use_key,city_id,lat=NULL,lon=NULL){
url <- modify_url("https://developers.zomato.com",
path = "/api/v2.1/establishments")
params=list()
params$city_id=city_id
if(!is.null(lat)){
params$lat=lat
}
if(!is.null(lon)){
params$lon=lon
}
resp <- GET(url,add_headers(Accept="application/json",
"user-key"=use_key),query=params)
return(zomato_parser(resp))
}
library(httr)
establishments_api<-function(use_key,city_id,lat=NULL,lon=NULL){
url <- modify_url("https://developers.zomato.com",
path = "/api/v2.1/establishments")
params=list()
params$city_id=city_id
if(!is.null(lat)){
params$lat=lat
}
if(!is.null(lon)){
params$lon=lon
}
resp <- GET(url,add_headers(Accept="application/json",
"user-key"=use_key),query=params)
return(zomato_parser(resp))
}
establishments_api("00b8630a1745b3dda0d7ec926bba5c04","12")
